<?php

class MT_Controller_CRUDTest extends MT_Testing_Controller_TestCase {
    /**
     * @var array
     */
    private $casettes;

    function setUp() {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->mixtape->environment()->define()->model( new Casette());
    }

    function test_exists() {
        $this->assertClassExists( 'MT_Controller_CRUD' );
    }

    function test_get_items_return_all_items() {
        $this->add_casette_rest_api_endpoint();
        $request = new WP_REST_Request( 'GET', '/casette-crud-test/v1/casettes' );
        $response = $this->rest_server->dispatch( $request );

        $this->assertNotNull( $response );
        $this->assert_http_response_status_success( $response );
        $data = $response->get_data();
        $this->assertEquals( 2, count( $data ) );
        $this->assertEquals( 1, $data[0]['id'] );
        $this->assertEquals( 2, $data[1]['id'] );
    }

    function test_get_item_not_found_if_entity_null() {
        $failing_mock_data_store = $this->getMockBuilder(MT_Interfaces_Data_Store::class)
            ->setMethods( get_class_methods( MT_Interfaces_Data_Store::class) )
            ->getMock();

        $failing_mock_data_store->expects($this->any())
            ->method('get_entity')
            ->willReturn( null );
        $this->add_casette_rest_api_endpoint( $failing_mock_data_store );
        $request = new WP_REST_Request( 'GET', '/casette-crud-test/v1/casettes/1' );
        $response = $this->rest_server->dispatch( $request );

        $this->assertNotNull( $response );
        $this->assert_http_response_status_not_found( $response );
    }

    function test_get_item_return_item() {
        $this->add_casette_rest_api_endpoint();
        $request = new WP_REST_Request( 'GET', '/casette-crud-test/v1/casettes/1' );
        $response = $this->rest_server->dispatch( $request );

        $this->assertNotNull( $response );
        $this->assert_http_response_status_success( $response );
        $data = $response->get_data();
        $this->assertTrue( isset($data['id'] ) );
        $this->assertEquals( 1, $data['id'] );
    }

    function test_create_item_succeeds_when_data_store_returns_id() {
        $this->add_casette_rest_api_endpoint();
        $request = new WP_REST_Request( 'POST', '/casette-crud-test/v1/casettes' );
        $request->set_param( 'title', 'Awesome Mixtape 3');
        $request->set_param( 'songs', array( 1,2,3,4 ) );

        $response = $this->rest_server->dispatch( $request );

        $this->assertNotNull( $response );
        $this->assert_http_response_status_created( $response );
        $data = $response->get_data();
        $this->assertTrue( isset($data['id'] ) );
        $this->assertEquals( 3, $data['id'] );
    }

    function test_update_item_succeeds_when_data_store_returns_id() {
        $this->add_casette_rest_api_endpoint();
        $request = new WP_REST_Request( 'PUT', '/casette-crud-test/v1/casettes/1' );
        $request->set_param( 'title', 'Awesome Mixtape 666');

        $response = $this->rest_server->dispatch( $request );

        $this->assertNotNull( $response );
        // used to be 201 but turns out the correct thing on update is to HTTP 200
        $this->assert_http_response_status_success( $response );
        $data = $response->get_data();
        $this->assertTrue( isset($data['id'] ) );
        $this->assertEquals( 3, $data['id'] );
    }

    function test_delete_item_succeeds() {
        $this->add_casette_rest_api_endpoint();
        $request = new WP_REST_Request( 'DELETE', '/casette-crud-test/v1/casettes/1' );
        $request->set_param( 'title', 'Awesome Mixtape 666');

        $response = $this->rest_server->dispatch( $request );

        $this->assertNotNull( $response );
        // used to be 201 but turns out the correct thing on update is to HTTP 200
        $this->assert_http_response_status_success( $response );
    }

    private function add_casette_rest_api_endpoint( $data_store = null ) {
        $env = $this->mixtape->environment();

        $mock_data_store = !empty( $data_store ) ? $data_store : $this->build_mock_casette_data_store();
        $env->define()->model( Casette::class )->with_data_store( $mock_data_store );
        $model_definition = $env->get()->model( Casette::class );

        $bundle = $env->define()
            ->rest_api( 'casette-crud-test/v1' );

        $bundle->endpoint()
            ->crud( '/casettes' )
            ->for_model( $model_definition );
        $env->start();

        do_action( 'rest_api_init' );
    }

    function build_mock_casette_data_store() {
        $this->environment->define()->model( Casette::class );
        $def = $this->environment->get()->model( 'Casette' );
        $this->casettes = array();
        $this->casettes[] = $def->create_instance( array(
            'id' => 1,
            'title' => 'Awesome Mix Vol ' . 1,
            'songs' => array( 1, 2, 3 )
        ) );
        $this->casettes[] = $def->create_instance( array(
            'id' => 2,
            'title' => 'Awesome Mix Vol ' . 2,
            'songs' => array( 1, 2, 3, 4 )
        ) );
        $mock = $this->getMockBuilder(MT_Interfaces_Data_Store::class)
            ->setMethods( get_class_methods( MT_Interfaces_Data_Store::class) )
            ->getMock();
        $mock->expects($this->any())
            ->method('get_entities')
            ->willReturn( new MT_Model_Collection( $this->casettes ) );
        $mock->expects($this->any())
            ->method('get_entity')
            ->willReturn( $this->casettes[0] );
        $mock->expects($this->any())
            ->method('upsert')
            ->willReturn( 3 );
        $mock->expects($this->any())
            ->method('delete')
            ->willReturn( true );
        return $mock;
    }
}